# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pubsub_pb2 as pubsub__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in pubsub_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BrokerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConnectPublisher = channel.unary_unary(
                '/pubsub.BrokerService/ConnectPublisher',
                request_serializer=pubsub__pb2.PublisherConnectRequest.SerializeToString,
                response_deserializer=pubsub__pb2.PublisherConnectResponse.FromString,
                _registered_method=True)
        self.CreateTopic = channel.unary_unary(
                '/pubsub.BrokerService/CreateTopic',
                request_serializer=pubsub__pb2.CreateTopicRequest.SerializeToString,
                response_deserializer=pubsub__pb2.CreateTopicResponse.FromString,
                _registered_method=True)
        self.PublishMessage = channel.unary_unary(
                '/pubsub.BrokerService/PublishMessage',
                request_serializer=pubsub__pb2.PublishMessageRequest.SerializeToString,
                response_deserializer=pubsub__pb2.PublishMessageResponse.FromString,
                _registered_method=True)
        self.ConnectSubscriber = channel.unary_unary(
                '/pubsub.BrokerService/ConnectSubscriber',
                request_serializer=pubsub__pb2.SubscriberConnectRequest.SerializeToString,
                response_deserializer=pubsub__pb2.SubscriberConnectResponse.FromString,
                _registered_method=True)
        self.SubscribeToTopic = channel.unary_unary(
                '/pubsub.BrokerService/SubscribeToTopic',
                request_serializer=pubsub__pb2.SubscribeToTopicRequest.SerializeToString,
                response_deserializer=pubsub__pb2.SubscribeToTopicResponse.FromString,
                _registered_method=True)
        self.ReceiveMessages = channel.unary_stream(
                '/pubsub.BrokerService/ReceiveMessages',
                request_serializer=pubsub__pb2.SubscriberConnectRequest.SerializeToString,
                response_deserializer=pubsub__pb2.Message.FromString,
                _registered_method=True)


class BrokerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConnectPublisher(self, request, context):
        """Metode pentru Publisher
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectSubscriber(self, request, context):
        """Metode pentru Subscriber
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessages(self, request, context):
        """Streaming de mesaje cÄƒtre Subscriber
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConnectPublisher': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectPublisher,
                    request_deserializer=pubsub__pb2.PublisherConnectRequest.FromString,
                    response_serializer=pubsub__pb2.PublisherConnectResponse.SerializeToString,
            ),
            'CreateTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTopic,
                    request_deserializer=pubsub__pb2.CreateTopicRequest.FromString,
                    response_serializer=pubsub__pb2.CreateTopicResponse.SerializeToString,
            ),
            'PublishMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMessage,
                    request_deserializer=pubsub__pb2.PublishMessageRequest.FromString,
                    response_serializer=pubsub__pb2.PublishMessageResponse.SerializeToString,
            ),
            'ConnectSubscriber': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectSubscriber,
                    request_deserializer=pubsub__pb2.SubscriberConnectRequest.FromString,
                    response_serializer=pubsub__pb2.SubscriberConnectResponse.SerializeToString,
            ),
            'SubscribeToTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeToTopic,
                    request_deserializer=pubsub__pb2.SubscribeToTopicRequest.FromString,
                    response_serializer=pubsub__pb2.SubscribeToTopicResponse.SerializeToString,
            ),
            'ReceiveMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveMessages,
                    request_deserializer=pubsub__pb2.SubscriberConnectRequest.FromString,
                    response_serializer=pubsub__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub.BrokerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pubsub.BrokerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BrokerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConnectPublisher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pubsub.BrokerService/ConnectPublisher',
            pubsub__pb2.PublisherConnectRequest.SerializeToString,
            pubsub__pb2.PublisherConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pubsub.BrokerService/CreateTopic',
            pubsub__pb2.CreateTopicRequest.SerializeToString,
            pubsub__pb2.CreateTopicResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pubsub.BrokerService/PublishMessage',
            pubsub__pb2.PublishMessageRequest.SerializeToString,
            pubsub__pb2.PublishMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectSubscriber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pubsub.BrokerService/ConnectSubscriber',
            pubsub__pb2.SubscriberConnectRequest.SerializeToString,
            pubsub__pb2.SubscriberConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pubsub.BrokerService/SubscribeToTopic',
            pubsub__pb2.SubscribeToTopicRequest.SerializeToString,
            pubsub__pb2.SubscribeToTopicResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/pubsub.BrokerService/ReceiveMessages',
            pubsub__pb2.SubscriberConnectRequest.SerializeToString,
            pubsub__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
